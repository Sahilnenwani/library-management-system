@model libraryproject.BookTable

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/sharedview.cshtml";
}



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })






        <div class="row">

            <div class="col-md-3">
                <div class="form-group">
                    <label class="bmd-label-floating">Book ID</label>
                    <input type="text" class="form-control" disabled>
                </div>
            </div>


            <div class="col-md-3">
                <div class="nav-item dropdown">
                    <label class="bmd-label-floating">Department</label>
                    @Html.DropDownList("DepartmentID", null, "--Select Department--", htmlAttributes: new { @class = "nav-link dropdown-toggle" })
                    @Html.ValidationMessageFor(model => model.DepartmentID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-3">
                <div class="nav-item dropdown">
                    <label class="bmd-label-floating">Book type</label>
                    @Html.DropDownList("BookTypeID", null, "--Select type--", htmlAttributes: new { @class = "nav-link dropdown-toggle" })
                    @Html.ValidationMessageFor(model => model.BookTypeID, "", new { @class = "text-danger" })
                </div>
            </div>









            @*<div class="form-group">
                    @Html.LabelFor(model => model.DepartmentID, "DepartmentID", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("DepartmentID", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.DepartmentID, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            @*<div class="form-group">
                    @Html.LabelFor(model => model.BookTypeID, "BookTypeID", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("BookTypeID", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.BookTypeID, "", new { @class = "text-danger" })
                    </div>
                </div>*@
        </div>
        <div class="form-group row" style="margin-top:20px">
            <div class="form-group">
                @*@Html.LabelFor(model => model.BookTitle, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <div class="col-md">
                    <label class="bmd-label-floating">Book Title</label>
                    @Html.EditorFor(model => model.BookTitle, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BookTitle, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.Author, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <div class="col-md">
                    <label class="bmd-label-floating">Author</label>
                    @Html.EditorFor(model => model.Author, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Author, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row" style="margin-top:20px">
            <div class="form-group">
                @*@Html.LabelFor(model => model.BookName, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <div class="col-md">
                    <label class="bmd-label-floating">BookName</label>
                    @Html.EditorFor(model => model.BookName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BookName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.Edition, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <div class="col-md">
                    <label class="bmd-label-floating">Edition</label>
                    @Html.EditorFor(model => model.Edition, new { htmlAttributes = new { @class = "form-control" , @type="number"} })
                    @Html.ValidationMessageFor(model => model.Edition, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row" style="margin-top:20px">
            <div class="form-group">
                @*@Html.LabelFor(model => model.RegDate, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <div class="col-md">
                    <label class="bmd-label-static">Reg Date</label>

                    @Html.EditorFor(model => model.RegDate, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
                    @Html.ValidationMessageFor(model => model.RegDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @*@Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })*@
                <div class="col-md">
                    <label class="bmd-label-floating">Price</label>
                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control    required", @type = "number", @id = "price", @name = "price", @min = "100", @max = "25000" } })
                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group" style="margin-top:20px">
            @*@Html.LabelFor(model => model.TotalCopies, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                <label class="bmd-label-floating">Total Copies</label>
                @Html.EditorFor(model => model.TotalCopies, new { htmlAttributes = new { @class = "form-control required",  @type = "number", @id = "quantity", @name = "quantity", @min = "1", @max = "20" } })
                @Html.ValidationMessageFor(model => model.TotalCopies, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @*@Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                <label class="bmd-label-floating">Description</label>
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            <div class="col-8 offset-4 row">

                <div class="col">
                    @*<button  class="btn btn-primary  w-100" id="CreateForm" >Create</button>*@                
    <input type="submit" class="btn btn-primary  w-100" value="Add Book" @*onclick="return Validate()"*@ id="CreateForm" />
                </div>
                <div class="col">
                    @*<a asp-action="Index" class="btn btn-primary w-100"><i class="fas fa-sign-out-alt"></i>Back</a>*@
                    <a href="@Url.Action("Index","BookTables")" class="btn btn-primary w-100">
                        <i class="fas fa-sign-out-alt"></i> &nbsp; Back
                    </a>


                </div>


            </div>
        </div>


        @*<div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <button type="submit" class="btn btn-primary pull-center">Create</button>

                </div>
            </div>*@
    </div>
}



<script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>

<script type="text/javascript">
    //$(document).Validate(function () {
    //    $("#checkdata").click(function () {
          
    //        Swal.fire({
    //            title: 'Do you want to save the changes?',
    //            showDenyButton: true,
    //            showCancelButton: true,
    //            confirmButtonText: `Save`,
    //            denyButtonText: `Don't save`,
    //        }).then((result) => {
    //            /* Read more about isConfirmed, isDenied below */
    //            if (result.isConfirmed) {
    //                Swal.fire('Saved!', '', 'success')
    //            } else if (result.isDenied) {
    //                Swal.fire('Changes are not saved', '', 'info')
    //            }
    //        })

    //    })
    //    })

    //var check = false
    //function Validate()  {

    //    Swal.fire({
    //        title: 'Are you sure?',
    //        text: "This operation cannot be undone!",
    //        type: 'warning',
    //        showCancelButton: true,
    //        confirmButtonColor: '#3085d6',
    //        cancelButtonColor: '#d33',
    //        confirmButtonText: 'Yes',
                   
    //    })
    //    return false
    //}



    //function Validate() {
    //    //if (document.getElementById("CreateForm").value=" ") {
    //    var check = false
    //        Swal.fire({
    //                title: 'Do you want to save the changes?',
    //                showCancelButton: true,
    //                confirmButtonText: `Save`,
    //            check = true
    //                return check

    //            })
                  
                  
    //    return check
    //    //}
    //        }  


  


    var check=false
    function Validate()  {
            Swal.fire({
                title: 'Do you want to save the changes?',
                
                showCancelButton: true,
                confirmButtonText: `Save`,
                
            }).then((result) => {
                /* Read more about isConfirmed, isDenied below */
                if (result.isConfirmed) {
                    Swal.fire('Saved!', '', 'success')
                    check = true
                    return check
                   
                } 
              
            })
        return check
    }
</script>

















